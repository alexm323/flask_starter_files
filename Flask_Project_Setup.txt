Quick Copy Paste:
_________________________________________________________________________________
Setting up the Venv and the app to be made:

python3 -m venv venv
source venv/bin/activate
install flask
export EXTERNAL_ENV=development
pip install flask-debugtoolbar
pip install psycopg2-binary
pip install flask-sqlalchemy


__________________________________________________________________________________

This goes in the app.py:

from flask import Flask, request, render_template,  redirect, flash, session
from flask_debugtoolbar import DebugToolbarExtension
from models import db,  connect_db, Model_Name_Sample
from forms import Sample_Form

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///sample_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = True
app.config['SECRET_KEY'] = "ILessThan3You"
app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = False
debug = DebugToolbarExtension(app)

connect_db(app)


__________________________________________________________________________________
This goes in the forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, FloatField, BooleanField, IntegerField, RadioField, SelectField
from wtforms.validators import InputRequired, Email, Optional


class SampleForm(FlaskForm):
    email = StringField("Email", validators=[Optional(), Email()])
    name = StringField("Sample Name",  validators=[
                       InputRequired(message="Sample Name can't be blank")])
    price = FloatField("Sample Price in USD")
    quantity = IntegerField("How many?")
    is_true = BooleanField("This is either true or false")






__________________________________________________________________________________

This goes in the models.py 


from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


def connect_db(app):
    db.app = app
    db.init_app(app)

class SampleDepartment(db.Model):
    """Department Model"""

    __tablename__ = "departments"

    dept_code = db.Column(db.Text, primary_key=True)
    dept_name = db.Column(db.Text, nullable=False, unique=True)
    phone = db.Column(db.Text)

    def __repr__(self):
        return f"<Department {self.dept_code} {self.dept_name} {self.phone} >"



__________________________________________________________________________________


For Browser Caching Errors do a hard reload with ctrl+f5


from flask import Flask, request, render_template, redirect, session

app = Flask(__name__)


----------------------------------------------------------------------------------
This gives us most of the functionality then we if we also want the debugger tool:


$ pip install flask-debugtoolbar

 - Stuff that needs to be in the file :


from flask_debugtoolbar import DebugToolbarExtension
//debug toolbar requires that we use a secret key
app.config['SECRET_KEY'] = "oh-so-secret"
//This line makes it so that we dont stop the redirects from happening. 
app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = False
//also a requirement within the tool bar and we also have to install it with pip
debug = DebugToolbarExtension(app)

This is only going to pop the tool bar up when you are using the templates so make sure you use the render_template function before you look for the toolbar


---------------------------------------------------------------------------------




This is unit test stuff to prevent certain errors:
from unittest import TestCase


app.config['TESTING'] = True
app.config['DEBUG_TB_HOSTS'] = ['dont-show-debug-toolbar']





Setup a virtual environment in the root folder where you want to make it, also initialize a git repository if you want to add it to github:
1. python3 -m venv venv    = Makes a folder called venv 
2. source venv/bin/activate
3. Don't forget that this file needs to go into a .gitignore file before uploading to git hub


Make a requirements page using pip freeze

pip freeze > requirements.txt


git

make sure to make a .gitignore file 
echo venv/ .gitignore


-------------------------
install flask

export EXTERNAL_ENV=development

flask run


-------------------------------------------

Connecting Static Files:


    <link rel="stylesheet" href="{{ url_for('static',filename='style.css')}}">
    <script src="https://code.jquery.com/jquery-3.2.1.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.js"></script>
    <script src="{{url_for('static', filename='app.js')}}"></script>


-----------------------------------------------
OPTIONAL AND HAVE NEVER RUN INTO THIS ISSUE
CORS could run into an error with permissions of CORS make sure to install
$ pip install -U flask-cors

from flask_cors import CORS 
CORS(app)


______________________________________________________________________________

SQL Alchemy install notes
no problems with downloading the packages througb the WSL terminal in vscode 
pip install psycopg2-binary
pip install flask-sqlalchemy

_______________________________
Setting up inside the flask app 

1. We import in sql alchemy

from flask_sqlalchemy import SQLAlchemy

2. Create a variable that we will use to capture whatever sql alchemy returns to us

db = SQLAlchemy()

so we run SQLAlchemy and have it so that returns that variable
-most of the things we do will involve something like db.some_action


3. Associate our database with our app

db.app = app
db.init_app(app)

-we still havent said what database to use so thats the next step. 

4. Configure an important property that specifies that we are using postgres and which database we want our app to use. 
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///name_of_our_db'


_______________________________

Going to configure it so that we seperate our sql alchemy stuff. We are going to leave the app.config but move almost everything else

We are going to have the following in our models page 
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


def connect_db(app):
    db.app = app
    db.init_app(app)

Those two lines are straight from the SQL alchemy docs
The connect_db function is what we are going to wrap our app and init_app in 

Set the SQLALCHEMY_TRACK_MODIFCATIONS = FALSE 

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False


________________________________

After we run our app.py to create our models we have to use 

db.create_all()

and this will make our tables for us. 


